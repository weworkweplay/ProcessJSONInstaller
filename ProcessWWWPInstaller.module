<?php

require_once 'classes/Dependency.php';
require_once 'classes/Module.php';

/**
 * WWWP Installer Module
 *
 * A tool for common used setup processes
 *
 * Copyright 2013 by Pieter Beulque
 *
 * ProcessWire 2.x
 * Copyright (C) 2012 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class ProcessWWWPInstaller extends Process {

    public static function getModuleInfo() {
        return array(
            'title' => 'We Work We Play Installer',
            'summary' => 'Configure ProcessWire for common use cases',
            'version' => 010,
            'author' => 'Pieter Beulque',
            'permission' => 'page-edit',
        );
    }

    const pageName = 'wwwp-installer';

    /**
     * Array containing all installable modules
     */
    protected $installableModules;

    private function loadModules() {
        $dir = wire('config')->paths->siteModules . get_class() . DIRECTORY_SEPARATOR . 'modules';
        $tmp = scandir($dir);
        $this->installableModules = array();

        foreach ($tmp as $file) {
            if (strpos($file, '.json') > 0) {
                $json = json_decode(file_get_contents($dir . DIRECTORY_SEPARATOR . $file));
                $this->installableModules[substr($file, 0, -5)] = WWWP\Module::createFromJSON($json);
            }
        }
    }

    public function init() {
        parent::init(); // required
        $this->loadModules();
    }

    public function ___execute() {
        $table = wire('modules')->get("MarkupAdminDataTable");
        $url = wire('pages')->get("template=admin, name=" . self::pageName)->url;

        $table->headerRow(array(
            'name',
            'description',
            'action'
        ));

        foreach($this->installableModules as $key => $module) {
            $table->row(array(
                $module->name,
                $module->description,
                'Install' => 'install/' . $key
            ));
        }

        $table->action(array('Export site' => $url . 'export/'));

        $out = $table->render();
        return $out;
    }

    protected function addFolderToZip ($dir, $zip) {
        $actualDir = $dir;
        $dirName = substr($dir, strpos($dir, '/site/') + 1);

        if ($dh = opendir($actualDir)) {
            $zip->addEmptyDir($dirName);

            while (($file = readdir($dh)) !== false) {
                if ($file === '.' || $file === '..' || $file === '.DS_Store') continue;

                if(!is_file($actualDir . '/' . $file)) {
                    if ($file !== '.git') {
                        $this->addFolderToZip($actualDir . '/' . $file, $zip);
                    }
                    continue;
                }

                $zip->addFile($dir . '/' . $file, $dirName . '/' . $file);
            }
        }
    }

    protected function buildZipArchive() {
        $directories = array('site/install', 'site/modules', 'site/templates');
        $zip = new ZipArchive();

        $filePath = wire('config')->paths->root . 'site/assets/site-export-' . date('Y-m-d') . '.zip';

        if ($zip->open($filePath, ZipArchive::CREATE) === TRUE) {
            foreach ($directories as $dir) {
                $this->addFolderToZip(wire('config')->paths->root . $dir, $zip);
            }

            $zip->close();
        }

        return $filePath;
    }

    public function ___executeExport() {
        $export = wire('modules')->get('ProcessExportProfile');

        if (!$export) {
            $this->error('You need the ProcessExportProfile module for this.');
            return $this->___execute();
        }

        if (!$export->___executeRemove()) {
            $this->error('Something went wrong cleaning a leftover install');
        }

        if (!$export->___executeDump()) {
            $this->error('Something went wrong executing the database dump');
        }

        if (!$export->___executeCopy()) {
            $this->error('Something went wrong copying your files');
        }

        $filename = $_SERVER['HTTP_REFERER'];
        $filename = substr($filename, strpos($filename, '//') + 2);
        $filename = substr($filename, 0, strpos($filename, '/admin/'));
        $filename = str_replace(array('.', '/'), '-', $filename);

        $file = $this->buildZipArchive();

        header("Content-Type: application/zip");
        header("Content-Transfer-Encoding: Binary");
        header("Content-disposition: attachment; filename=\"export-" . $filename . "-" . date('Ymd') . ".zip" . "\"");
        readfile($file);
    }

    public function installModule($name) {
        $this->loadModules();

        $module = $this->installableModules[$name];

        if (empty($module)) {
            throw new WireException();
        }

        $module->install();

        return $module;
    }

    /**
     * Called when the URL is this module's page URL + "/install/?:name/"
     */
    public function ___executeInstall() {
        try {
            $module = $this->installModule(wire('input')->urlSegment(2));
        } catch (WireException $e) {
            header('Location:' . wire('pages')->get("template=admin, name=" . self::pageName)->url);
        }

        $this->message('Succesfully installed or updated ' . $module->name);

        Wire::setFuel('processHeadline', 'Installing ' . $module->name);

        $this->breadcrumbs->add(new Breadcrumb('../', 'WWWP Installer'));

        $output = '';

        if (!empty($module->fields)) {
            $output .= '<h2>Created or edited fields</h2><ul class="wwwp-installer-list">';

            foreach ($module->fields as $field) {
                $output .= '<li><code>' . $field->name . '</code> - ' . $field->label . '</li>';
            }

            $output .= '</ul>';
        }

        if (!empty($module->templates)) {
            $output .= '<h2>Created or edited templates</h2><ul class="wwwp-installer-list">';

            foreach ($module->templates as $template) {
                $output .= '<li><code>' . $template->name . '</code> - ' . $template->label . '</li>';
            }

            $output .= '</ul>';
        }

        if (!empty($module->pages)) {
            $output .= '<h2>Created or edited pages</h2><ul class="wwwp-installer-list">';

            foreach ($module->pages as $page) {
                $output .= '<li>' . $page->name . '</li>';
            }

            $output .= '</ul>';
        }

        return $output . '<p><a href="../">Go Back</a></p>';
    }

    public function ___install() {
        $page = new Page();
        $page->template = 'admin';
        $page->name = self::pageName;
        $page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
        $page->process = $this;
        $page->title = 'WWWP Installer';
        $page->save();

        $this->message('Created page: ' . $page->path);

        $this->installModule('config');
        $this->message('Ran config installation script');
    }

    public function ___uninstall() {
        $moduleID = $this->modules->getModuleID($this);
        $page = $this->pages->get('template=admin,process=' . $moduleID . ',name=' . self::pageName);

        if ($page->id) {
            $this->message("Deleting Page: {$page->path}");
            $page->delete();
        }
    }
}
