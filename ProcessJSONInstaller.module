<?php

require_once 'classes/Dependency.php';
require_once 'classes/Module.php';
require_once 'classes/JSONLoader.php';

/**
 * JSON Installer Module
 *
 * A tool for common used setup processes
 *
 * Copyright 2013 by Pieter Beulque
 *
 * ProcessWire 2.x
 * Copyright (C) 2012 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class ProcessJSONInstaller extends Process {

    public static $moduleInfo = array(
        'title' => 'JSON Installer',
        'summary' => 'Run JSON files to create fields, templates and pages and install Plugin Modules',
        'version' => 03,
        'author' => 'Pieter Beulque',
        'permission' => 'page-edit',
    );

    public static function getModuleInfo() {
        return self::$moduleInfo;
    }

    const pageName = 'json-installer';
    const confirmParam = 'confirm';

    /**
     * Array containing all installable modules
     */
    protected $installableModules;
    protected $jsonLoader;

    /**
     * The base URL for the module
     */
    protected $url;

    public function init() {
        parent::init(); // required
        $this->jsonLoader = JSONInstaller\JSONLoader::create();
        $this->url = wire('pages')->get('template=admin, name=' . self::pageName)->url;
    }

    public function ___execute() {
        $table = $this->modules->get('MarkupAdminDataTable');
        $config = $this->config;

        $headerColumns = array(
            'name',
            'description'
        );

        if ($config->advanced) {
            $headerColumns[] = 'also un-/installs';
            $headerColumns[] = 'install';
            $headerColumns[] = 'uninstall';
        } else {
            $headerColumns[] = 'also installs';
            $headerColumns[] = 'action';
        }

        $table->headerRow($headerColumns);

        $installableModules = $this->jsonLoader->getModules();

        foreach ($installableModules as $key => $module) {

            $jsonDependencies = array();
            foreach ($module->jsonDependencies as $jsonDependency) {
                if(isset($jsonDependency->name)) {
                    $jsonDependencies[] = $jsonDependency->name;
                }
            }

            if(count($jsonDependencies) > 0) {
                $alsoInstalls = implode(', ', $jsonDependencies);
            } else {
                $alsoInstalls = '';
            }

            $contentColumns = array(
                $module->name,
                $module->description,
                $alsoInstalls,
                'Install' => 'install/' . $key
            );

            if ($config->advanced) {
                if ($module->hasDeletableItems($forceDryRun = true)) {
                    $contentColumns['Uninstall'] = 'uninstall/' . $key . '/' . self::confirmParam;
                } else {
                    $contentColumns[] = 'n/a';
                }

            }

            $table->row($contentColumns);
        }

        $table->action(array('Export site' => $this->url . 'export/'));

        $out = $table->render();
        return $out;
    }

    protected function addFolderToZip ($dir, $zip) {
        $actualDir = $dir;
        $dirName = substr($dir, strpos($dir, '/site/') + 1);

        if ($dh = opendir($actualDir)) {
            $zip->addEmptyDir($dirName);

            while (($file = readdir($dh)) !== false) {
                if ($file === '.' || $file === '..' || $file === '.DS_Store') continue;

                if (!is_file($actualDir . '/' . $file)) {
                    if ($file !== '.git') {
                        $this->addFolderToZip($actualDir . '/' . $file, $zip);
                    }
                    continue;
                }

                $zip->addFile($dir . '/' . $file, $dirName . '/' . $file);
            }
        }
    }

    protected function buildZipArchive() {
        $directories = array('site/install', 'site/modules', 'site/templates');
        $zip = new ZipArchive();

        $filePath = $this->config->paths->root . 'site/assets/site-export-' . date('Y-m-d') . '.zip';

        if ($zip->open($filePath, ZipArchive::CREATE) === TRUE) {
            foreach ($directories as $dir) {
                $this->addFolderToZip($this->config->paths->root . $dir, $zip);
            }

            $zip->close();
        }

        return $filePath;
    }

    public function ___executeExport() {
        $export = $this->modules->get('ProcessExportProfile');

        if (!$export) {
            $this->error('You need the ProcessExportProfile module for this.');
            return $this->___execute();
        }

        if (!$export->___executeRemove()) {
            $this->error('Something went wrong cleaning a leftover install');
        }

        if (!$export->___executeDump()) {
            $this->error('Something went wrong executing the database dump');
        }

        if (!$export->___executeCopy()) {
            $this->error('Something went wrong copying your files');
        }

        $filename = $_SERVER['HTTP_REFERER'];
        $filename = substr($filename, strpos($filename, '//') + 2);
        $filename = substr($filename, 0, strpos($filename, '/admin/'));
        $filename = str_replace(array('.', '/'), '-', $filename);

        $file = $this->buildZipArchive();

        header('Content-Type: application/zip');
        header('Content-Transfer-Encoding: Binary');
        header('Content-disposition: attachment; filename="export-' . $filename . '-' . date('Ymd') . '.zip' . '"');
        readfile($file);
    }

    public function installModule($name) {
        $module = $this->jsonLoader->getModule($name);

        if ($module) {
            $module->install();
        } else {
            throw new WireException('Install: module ' . $name . ' does not exist.');
        }

        return $module;
    }

    public function uninstallModule($name) {
        $module = $this->jsonLoader->getModule($name);

        if ($module) {
            $module->uninstall();
        } else {
            throw new WireException('Uninstall: module ' . $name . ' does not exist.');
        }

        return $module;
    }

    public function uninstallModuleDry($name) {
        $module = $this->jsonLoader->getModule($name);

        if ($module) {
            $module->uninstall($dryRun = true);
        } else {
            throw new WireException('Uninstall: module ' . $name . ' does not exist.');
        }

        return $module;
    }

    /**
     * Called when the URL is this module's page URL + "/install/?:name/"
     */
    public function ___executeInstall() {
        try {
            $module = $this->installModule($this->input->urlSegment(2));
        } catch (WireException $e) {
            $this->error($e->getMessage());
            return "";
        }

        $this->message('Succesfully installed or updated ' . $module->name);

        $headline = 'Installed ' . $module->name;

        $this->fuel->set('processHeadline', $headline);

        $this->breadcrumbs->add(new Breadcrumb($this->url, self::$moduleInfo['title']));

        $outputTemplate= self::getTemplate('install');
        $outputTemplate->setArray(array(
            'headline' => $headline,
            'modules' => JSONInstaller\Module::$installedModules
        ));

        return $outputTemplate->render();

    }

    /**
     * Called when the URL is this module's page URL + "/uninstall/?:name/"
     */
    public function ___executeUninstall() {

        $name = $this->input->urlSegment(2);
        $confirm = $this->input->urlSegment(3);

        if($confirm === self::confirmParam) {
            return $this->confirmUninstall();
        }

        $this->breadcrumbs->add(new Breadcrumb($this->url, self::$moduleInfo['title']));

        $outputTemplate= self::getTemplate('uninstall');

        try {

            $module = $this->uninstallModule($this->input->urlSegment(2));

            $headline = 'Uninstalled ' . $module->name;

            $this->fuel->set('processHeadline', $headline);

            $outputTemplate->setArray(array(
                'headline' => $headline,
                'modules' => JSONInstaller\Module::$uninstalledModules
            ));

        } catch (WireException $e) {
            $this->error($e->getMessage());
        }

        return $outputTemplate->render();

    }

    /**
     * Called when the URL is this module's page URL + "/confirmuninstall/?:name/"
     */
    protected function ___confirmUninstall() {

        $this->breadcrumbs->add(new Breadcrumb($this->url, self::$moduleInfo['title']));

        $name = $this->input->urlSegment(2);

        $module = $this->uninstallModuleDry($name);

        $headline = 'Confirm uninstallation of ' . $module->name;
        $isNotInstalledYet = !$module->hasDeletableItems($forceDryRun = false);

        $this->fuel->set('processHeadline', $headline);

        if (!$isNotInstalledYet) {
            $this->message('This feature is experimental.');
            $this->message('The uninstall process will try to delete all pages, templates and fields defined in this module json, so if you included directives to merely modify existing pages, templates or fields, you should add a "prefab" property to each of those and set it to "true".');
            $this->message('Nothing will be deleted until you click the "Uninstall!" button below.');
        }

        $outputTemplate= self::getTemplate('confirm-uninstall');
        $outputTemplate->setArray(array(
            'headline' => $headline,
            'modules' => JSONInstaller\Module::$dryRunUninstalledModules,
            'isNotInstalledYet' => $isNotInstalledYet
        ));

        $out = $outputTemplate->render();

        if (!$isNotInstalledYet) {
            $button = $this->modules->get('InputfieldButton');
            $button->href = $this->url . 'uninstall/' . $name;
            $button->value = 'Uninstall!';

            $out .= $button->render();
        }

        return $out;
    }

    public function ___install() {
        $page = new Page();
        $page->template = 'admin';
        $page->name = self::pageName;
        $page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
        $page->process = $this;
        $page->title = 'JSON Installer';
        $page->save();

        $this->message('Created page: ' . $page->path);

        $this->installModule('config');
        $this->message('Ran config installation script');
    }

    public function ___uninstall() {
        $moduleID = $this->modules->getModuleID($this);
        $page = $this->pages->get('template=admin,process=' . $moduleID . ',name=' . self::pageName);

        if ($page->id) {
            $this->message('Deleting Page: ' . $page->path);
            $page->delete();
        }
    }

    protected static function getTemplate($templateName) {
        $file = dirname(__FILE__) . '/templates/' . $templateName . '.php';
        return new TemplateFile($file);
    }
}
